//-----------------------------------------------------------------------
// Name:- calulateRem
// Description:- Set a REM Font Size with Pixel Fallback for old Browsers
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 11/01/2015
// Usage:- @include font-size(14px)
//-----------------------------------------------------------------------
@function calculateRem($size) {
	$remSize: $size / 16px;
	@return $remSize * 1rem;
}

@mixin font-size($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

//-----------------------------------------------------------------------
// Name:- keyframes
// Description:- Auto create vendor prefix lines for animation keyframes
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 11/01/2015
// Usage:- @include keyframes($animation-name)
//-----------------------------------------------------------------------
@mixin keyframes($animation-name) {
	@-webkit-keyframes $animation-name {
		@content
	}
	@-moz-keyframes $animation-name {
		@content
	}
	@-ms-keyframes $animation-name {
		@content
	}
	@-o-keyframes $animation-name {
		@content
	}
	@keyframes $animation-name {
		@content
	}
}

//-----------------------------------------------------------------------
// Name:- animation
// Description:- Auto create vendor prefix lines for animation
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 11/01/2015
// Usage:- @include animation($str)
//-----------------------------------------------------------------------
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

//-----------------------------------------------------------------------
// Name:- transition
// Description:- Auto create vendor prefix lines for transition
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 11/01/2015
// Usage:- @include transition($args...)
//-----------------------------------------------------------------------
@mixin transition($args...) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-ms-transition: $args;
	-o-transition: $args;
	transition: $args;
}

//-----------------------------------------------------------------------
// Name:- clearfix
// Description:- Clearfix Hack for Floating Children
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 11/01/2015
// Usage:- @extend %clearfix;
//-----------------------------------------------------------------------
%clearfix {
	*zoom: 1;
	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

//-----------------------------------------------------------------------
// Name:- font-size
// Description:- font-size calculates relative Font Size
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- @include font-size($xlarge);
//-----------------------------------------------------------------------
@mixin font-size($size, $is-important: false) {
  $size: if(unitless($size), $size, $size / 1px);

  @if $is-important {
    font-size: $size + px !important;
    font-size: ($size / strip-units($base-font-size)) + rem !important;
  } @else {
    font-size: $size + px;
    font-size: ($size / strip-units($base-font-size)) + rem;
  }
}


//-----------------------------------------------------------------------
// Name:- strip-units
// Description:- Remove units from input
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- strip-units($base-font-size)
//-----------------------------------------------------------------------
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

//-----------------------------------------------------------------------
// Name:- respond
// Description:- Responsive
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- respond($media)
//-----------------------------------------------------------------------
@mixin respond($media) {
  @if $media == portrait-phones {
    @media only screen and (max-width: $min-device-width) { @content; }
  }
  @else if $media == landscape-phones {
    @media only screen and (min-width: breakpoint($min-device-width)) and (max-width: breakpoint($tablet-device-width)) { @content; }
  }
  @else if $media == all-phones {
    @media only screen and (max-width: breakpoint($tablet-device-width)) { @content; }
  }
  @else if $media == portrait-tablets {
    @media only screen and (max-width: $tablet-device-width) { @content; }
  }
  @else if $media == tablets {
  	@media only screen and (min-width: $tablet-device-width) and (max-width: $document-width - 1) { @content; }
  }
  @else if $media == desktop {
    @media only screen and (min-width: $tablet-device-width) { @content; }
  }
  @else if $media == document-width {
    @media only screen and (max-width: $document-width + 20) { @content; }
  }
  @else if $media == large-screens {
    @media only screen and (min-width: $max-device-width) { @content; }
  }
  @else if $media == print {
    @media print { @content; }
  }
  @else {
    @media only screen and ('#{$media}') { @content; }
  }
}

//-----------------------------------------------------------------------
// Name:- button-size
// Description:- Configure Button Size
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- button-size($size)
//-----------------------------------------------------------------------
@mixin button-size($size) {
  $n: 0;
  @if $size == xlarge {
    $n: $xlarge-button-font-size;
  }
  @if $size == large {
    $n: $large-button-font-size;
  }
  @if $size == medium {
    $n: $medium-button-font-size;
  }
  @if $size == small {
    $n: $small-button-font-size;
  }
  $button-font-size: $n;
  $button-height: ms($ms-ratio, $button-font-size) + 1;
  $line-height: $button-height -2;

  @include font-size($button-font-size);

  a {
    position: relative;
    padding: 0 ms(0, $button-font-size);
  }

  &.icon-left {
    a {
      padding-left: $button-height;
      &:before {
        left: $button-font-size / 1.5;
      }
    }
  }

  &.icon-right {
    a {
      padding-right: $button-height;
      &:after {
        right: $button-font-size / 1.5;
      }
    }
  }
}

//-----------------------------------------------------------------------
// Name:- line-and-height
// Description:- Calculate Line Height from Element Height
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- line-and-height($height)
//-----------------------------------------------------------------------
@mixin line-and-height($height) {
  height: $height;
  line-height: $height - 2;
}
@function height-calc($size) {
  @return ms($ms-ratio, $size) + 1;
}

//-----------------------------------------------------------------------
// Name:- clearfix
// Description:- Clearfix for Mobile Phones
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- mobilefix()
//-----------------------------------------------------------------------
@mixin mobilefix() {
  @include respond(all-phones) { 
    &:before, &:after {
      content: " ";
      display: table;
    }
    &:after {
      clear: both;
    }
    &:last-child {
      float: none;
    }
  }
}

//-----------------------------------------------------------------------
// Name:- em
// Description:- Convert pixels to ems
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- em($pixels)
//-----------------------------------------------------------------------
@function em($size-in-px, $context: 16) {
  @if not unitless($size-in-px) {
      $size-in-px: strip-units($size-in-px);
  }
  @if not unitless($context) {
      $context: strip-units($context);
  }
  @return ($size-in-px / $context) * 1em;
}

//-----------------------------------------------------------------------
// Name:- even
// Description:- Test for Even Numbers, Do Something with the result
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- even($number)
//-----------------------------------------------------------------------
@function even($number) {
  @if ($number % 2 == 0) {
    @return true;
  }
  @else {
    @return false;
  }
}

//-----------------------------------------------------------------------
// Name:- fade
// Description:- Fading Mixin
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- fade($direction, $duration)
//-----------------------------------------------------------------------
$fade-duration: .6s;

@mixin fade($direction: out, $duration: $fade-duration) {

  @if $direction != out {
    visibility: visible;
    @include opacity(1);
  }

  @else {
    visibility: hidden;
    @include opacity(0);
  }

  @include transition-property(opacity);
  @include transition-duration($fade-duration);

}

//-----------------------------------------------------------------------
// Name:- input-size
// Description:- Calculate Form Sizes
//-----------------------------------------------------------------------
// Coded by:- Dave Wakely
// Last Updated:- 28/01/2015
// Usage:- input-size($size)
//-----------------------------------------------------------------------
@mixin input-size($size) {
  @if $size == xxwide { $size: 100%; }
  @if $size == xwide { $size: 82.6666666667%; }
  @if $size == wide { $size: 65.3333333333%; }
  @if $size == normal { $size: 48%; }
  @if $size == narrow { $size: 30.6666666667%; }
  @if $size == xnarrow { $size: 13.3333333333%; }

  width: $size;
}
@mixin input-sizes-list() {
  $sizes: ();
  @each $item in $field-sizes {
    $sizes: join($sizes, unquote(".#{$item} "), comma);
  }
  #{$sizes} { @content }
}